package oracle.summit.model.sdo.service.common;

import com.oracle.xmlns.adf.svc.types.Conjunction;
import com.oracle.xmlns.adf.svc.types.FindCriteria;
import com.oracle.xmlns.adf.svc.types.ObjectFactory;

import com.oracle.xmlns.adf.svc.types.SortOrder;
import com.oracle.xmlns.adf.svc.types.ViewCriteria;
import com.oracle.xmlns.adf.svc.types.ViewCriteriaItem;
import com.oracle.xmlns.adf.svc.types.ViewCriteriaRow;

import java.security.cert.X509Certificate;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import javax.xml.ws.BindingProvider;

import javax.xml.ws.WebServiceRef;

import oracle.summit.model.sdo.views.common.EmpViewSDO;

import weblogic.security.SSL.TrustManager;

import weblogic.wsee.security.bst.ClientBSTCredentialProvider;
import weblogic.wsee.security.saml.SAMLTrustCredentialProvider;
import weblogic.wsee.security.unt.ClientUNTCredentialProvider;
import weblogic.wsee.security.util.CertUtils;

import weblogic.xml.crypto.wss.WSSecurityContext;
import weblogic.xml.crypto.wss.provider.CredentialProvider;
// This source file is generated by Oracle tools.
// Contents may be subject to change.
// For reporting problems, use the following:
// Generated by Oracle JDeveloper 12c 12.1.3.0.0.1008
public class HRAppModuleServiceSoapHttpPortClient {
    
    @WebServiceRef
    private static HRAppModuleService_Service hRAppModuleService_Service;

    private static List<TestResult> mTestResults = new ArrayList<TestResult>();
    private static ObjectFactory mDataFactory = new ObjectFactory();


    public static void main(String[] args) {
        hRAppModuleService_Service = new HRAppModuleService_Service();
        HRAppModuleService hRAppModuleService = hRAppModuleService_Service.getHRAppModuleServiceSoapHttpPort();

        // Configure credential providers
        Map<String, Object> requestContext = ((BindingProvider) hRAppModuleService).getRequestContext();

        try {
            setPortCredentialProviderList(requestContext);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        // Add your code to call the desired methods.
        testFinders(hRAppModuleService);
        writeResults();

    }
    
    private static void testFinders(HRAppModuleService hRAppModuleService)
    {
       testFindEmps(hRAppModuleService);

    }

    private static void writeResults()
    {
       System.out.println("********** TEST RESULTS **********\n");
       for (int i = 0; i < mTestResults.size(); i++)
       {
          TestResult result = mTestResults.get(i);
          System.out.printf("%4d  %-28s %s", i + 1, result.name, result.result);
          if (result.message != null)
             System.out.printf(": %s", result.message);
          System.out.printf("\n");
       }
       System.out.println();
       System.out.flush();
       mTestResults.clear();
    }

    private static void testFindEmps(HRAppModuleService hRAppModuleService)
    {
       try
       {
          System.out.println("********** findEmps() **********\n");

          //
          // WHERE dept name in ('Administration', 'Sales')
          //

          ViewCriteriaItem vci = makeViewCriteriaItem("Name", "IN", "Administration", null);
          vci.getValue().add("Sales");
          ViewCriteriaRow vcr = makeViewCriteriaRow(vci, null);
          ViewCriteria vc = makeViewCriteria(vcr);
          FindCriteria findCriteria = makeFindCriteria(0, -1, vc, null);

          List<EmpViewSDO> empList = hRAppModuleService.findEmpView1(findCriteria, null);
          boolean success = verifyFindEmpResult("1 3 5 11 13 14 15 23", empList);

          //
          // WHERE job in ('ANALYST', 'PRESIDENT') OR (sal > 2850 AND sal < 5000)
          //

//          vci = makeViewCriteriaItem("Sal", ">", 2850, null);
//          vcr = makeViewCriteriaRow(vci, Conjunction.OR);
//          vcr.getItem().add(makeViewCriteriaItem("Sal", "<", 5000, Conjunction.AND));
//          vc.getGroup().add(vcr);
//
//          empList = deptService.findEmps(findCriteria, null);
//          success &= verifyFindEmpResult("7566 7788 7839 7902", empList);

          if (success)
             mTestResults.add(new TestResult("findEmps", Result.Succeeded));
          else
             mTestResults.add(new TestResult("findEmps", Result.FAILED));
       }
       catch (Exception e)
       {
          e.printStackTrace();
          mTestResults.add(new TestResult("findEmps", Result.FAILED, e.getMessage()));
       }
    }

    enum Result
    {
       Succeeded,
       FAILED;
    }

    static class TestResult
    {
       String name;
       Result result;
       String message;

       TestResult(String name, Result result)
       {
          this.name = name;
          this.result = result;
       }

       TestResult(String name, Result result, String message)
       {
          this.name = name;
          this.result = result;
          this.message = message;
       }
    }
    
    private static ViewCriteriaItem makeViewCriteriaItem(String attribute, String operator, Object value,
                                                         Conjunction conjunction)
    {
       ViewCriteriaItem vci = mDataFactory.createViewCriteriaItem();
       vci.setAttribute(attribute);
       vci.setOperator(operator);
       vci.getValue().add(value);
       if (conjunction != null)
          vci.setConjunction(conjunction);
       return vci;
    }
    
    private static ViewCriteriaRow makeViewCriteriaRow(ViewCriteriaItem vci, Conjunction conjunction)
    {
       ViewCriteriaRow vcr = mDataFactory.createViewCriteriaRow();
       vcr.getItem().add(vci);
       if (conjunction != null)
          vcr.setConjunction(conjunction);
       return vcr;
    }

    private static ViewCriteria makeViewCriteria(ViewCriteriaRow vcr)
    {
       ViewCriteria vc = mDataFactory.createViewCriteria();
       vc.getGroup().add(vcr);
       return vc;
    }
    
    
    private static FindCriteria makeFindCriteria(int fetchStart, int fetchSize, ViewCriteria vc, SortOrder so)
    {
       FindCriteria fc = mDataFactory.createFindCriteria();
       fc.setFetchStart(fetchStart);
       fc.setFetchSize(fetchSize);
       fc.setFilter(vc);
       fc.setSortOrder(so);
       return fc;
    }
    
    private static boolean verifyFindEmpResult(String expected, List<EmpViewSDO> result)
    {
       System.out.println("Expect: " + expected);
       System.out.print("Actual: ");

       StringBuilder sb = new StringBuilder();
       if (result != null)
       {
          for (int i = 0, size = result.size(); i < size; i++)
          {
             if (i > 0)
                sb.append(' ');
             sb.append(result.get(i).getId());
          }
          System.out.println(sb + "\n");
       }

       return expected.equals(sb.toString());
    }
    
    @Generated("Oracle JDeveloper")
    public static void setPortCredentialProviderList(Map<String, Object> requestContext) throws Exception {
        // TODO - Provide the required credential values
        String username = "";
        String password = "";
        String clientKeyStore = "";
        String clientKeyStorePassword = "";
        String clientKeyAlias = "";
        String clientKeyPassword = "";
        String serverKeyStore = "";
        String serverKeyStorePassword = "";
        String serverKeyAlias = "";
        List<CredentialProvider> credList = new ArrayList<CredentialProvider>();

        // Add the necessary credential providers to the list

        // Code commented out due to empty username/password value found in the credential.
        // credList.add(getUNTCredentialProvider(username, password));

        // Code commented out due to empty server keystore value found in the credential.
        // credList.add(getBSTCredentialProvider(clientKeyStore, clientKeyStorePassword, clientKeyAlias, clientKeyPassword, serverKeyStore, serverKeyStorePassword, serverKeyAlias, requestContext));

        credList.add(getSAMLTrustCredentialProvider());

        requestContext.put(WSSecurityContext.CREDENTIAL_PROVIDER_LIST, credList);
    }

    @Generated("Oracle JDeveloper")
    public static CredentialProvider getSAMLTrustCredentialProvider() {
        return new SAMLTrustCredentialProvider();
    }

    @Generated("Oracle JDeveloper")
    public static CredentialProvider getUNTCredentialProvider(String username, String password) {
        return new ClientUNTCredentialProvider(username.getBytes(), password.getBytes());
    }

    @Generated("Oracle JDeveloper")
    public static CredentialProvider getBSTCredentialProvider(String clientKeyStore, String clientKeyStorePwd,
                                                              String clientKeyAlias, String clientKeyPwd,
                                                              String serverKeyStore, String serverKeyStorePwd,
                                                              String serverKeyAlias,
                                                              Map<String, Object> requestContext) throws Exception {
        List serverCertList = CertUtils.getCertificate(serverKeyStore, serverKeyStorePwd, serverKeyAlias, "JKS");

        List clientCertList = CertUtils.getCertificate(clientKeyStore, clientKeyStorePwd, clientKeyAlias, "JKS");

        final X509Certificate serverCert =
            (serverCertList != null && serverCertList.size() > 0) ? (X509Certificate) serverCertList.get(0) : null;
        final X509Certificate clientCert =
            (clientCertList != null && clientCertList.size() > 0) ? (X509Certificate) clientCertList.get(0) : null;

        requestContext.put(WSSecurityContext.TRUST_MANAGER, new TrustManager() {
            public boolean certificateCallback(X509Certificate[] chain, int validateErr) {
                boolean result =
                    (chain != null && chain.length > 0) && (chain[0].equals(serverCert) || chain[0].equals(clientCert));
                return result;
            }
        });

        return new ClientBSTCredentialProvider(clientKeyStore, clientKeyStorePwd, clientKeyAlias, clientKeyPwd, "JKS",
                                               serverCert);
    }
}
