package com.oracle.xmlns.apps.hr.service;

import com.oracle.xmlns.adf.svc.types.FindCriteria;

import java.math.BigDecimal;

import java.security.cert.X509Certificate;

import java.util.ArrayList;
import java.util.List;
import java.util.Map;

import javax.annotation.Generated;

import javax.xml.ws.BindingProvider;

import oracle.summit.model.polymorphicvo.views.common.ObjectFactory;
import oracle.summit.model.polymorphicvo.views.common.SEmpViewSDO;

import oracle.summit.model.polymorphicvo.views.common.SalespersonViewExSDO;

import weblogic.security.SSL.TrustManager;

import weblogic.wsee.security.bst.ClientBSTCredentialProvider;
import weblogic.wsee.security.saml.SAMLTrustCredentialProvider;
import weblogic.wsee.security.unt.ClientUNTCredentialProvider;
import weblogic.wsee.security.util.CertUtils;

import weblogic.xml.crypto.wss.WSSecurityContext;
import weblogic.xml.crypto.wss.provider.CredentialProvider;
// This source file is generated by Oracle tools.
// Contents may be subject to change.
// For reporting problems, use the following:
// Generated by Oracle JDeveloper 12c 12.1.3.0.0.1008
public class AppModuleServiceSoapHttpPortClient {
    public static void main(String[] args) {
        AppModuleService_Service appModuleService_Service = new AppModuleService_Service();
        AppModuleService appModuleService = appModuleService_Service.getAppModuleServiceSoapHttpPort();

        // Configure credential providers
        Map<String, Object> requestContext = ((BindingProvider) appModuleService).getRequestContext();

        try {
            setPortCredentialProviderList(requestContext);
        } catch (Exception ex) {
            ex.printStackTrace();
        }

        // Add your code to call the desired methods.
        try {
            SEmpViewSDO emp = testCreate(appModuleService);
            testFind(appModuleService);
            testDelete(appModuleService, emp);
            testFind(appModuleService);
        } catch (ServiceException e) {
        }
        
    }

    @Generated("Oracle JDeveloper")
    public static void setPortCredentialProviderList(Map<String, Object> requestContext) throws Exception {
        // TODO - Provide the required credential values
        String username = "";
        String password = "";
        String clientKeyStore = "";
        String clientKeyStorePassword = "";
        String clientKeyAlias = "";
        String clientKeyPassword = "";
        String serverKeyStore = "";
        String serverKeyStorePassword = "";
        String serverKeyAlias = "";
        List<CredentialProvider> credList = new ArrayList<CredentialProvider>();

        // Add the necessary credential providers to the list

        // Code commented out due to empty username/password value found in the credential.
        // credList.add(getUNTCredentialProvider(username, password));

        // Code commented out due to empty server keystore value found in the credential.
        // credList.add(getBSTCredentialProvider(clientKeyStore, clientKeyStorePassword, clientKeyAlias, clientKeyPassword, serverKeyStore, serverKeyStorePassword, serverKeyAlias, requestContext));

        credList.add(getSAMLTrustCredentialProvider());

        requestContext.put(WSSecurityContext.CREDENTIAL_PROVIDER_LIST, credList);
    }

    @Generated("Oracle JDeveloper")
    public static CredentialProvider getSAMLTrustCredentialProvider() {
        return new SAMLTrustCredentialProvider();
    }

    @Generated("Oracle JDeveloper")
    public static CredentialProvider getUNTCredentialProvider(String username, String password) {
        return new ClientUNTCredentialProvider(username.getBytes(), password.getBytes());
    }

    @Generated("Oracle JDeveloper")
    public static CredentialProvider getBSTCredentialProvider(String clientKeyStore, String clientKeyStorePwd,
                                                              String clientKeyAlias, String clientKeyPwd,
                                                              String serverKeyStore, String serverKeyStorePwd,
                                                              String serverKeyAlias,
                                                              Map<String, Object> requestContext) throws Exception {
        List serverCertList = CertUtils.getCertificate(serverKeyStore, serverKeyStorePwd, serverKeyAlias, "JKS");

        List clientCertList = CertUtils.getCertificate(clientKeyStore, clientKeyStorePwd, clientKeyAlias, "JKS");

        final X509Certificate serverCert =
            (serverCertList != null && serverCertList.size() > 0) ? (X509Certificate) serverCertList.get(0) : null;
        final X509Certificate clientCert =
            (clientCertList != null && clientCertList.size() > 0) ? (X509Certificate) clientCertList.get(0) : null;

        requestContext.put(WSSecurityContext.TRUST_MANAGER, new TrustManager() {
            public boolean certificateCallback(X509Certificate[] chain, int validateErr) {
                boolean result =
                    (chain != null && chain.length > 0) && (chain[0].equals(serverCert) || chain[0].equals(clientCert));
                return result;
            }
        });

        return new ClientBSTCredentialProvider(clientKeyStore, clientKeyStorePwd, clientKeyAlias, clientKeyPwd, "JKS",
                                               serverCert);
    }
    
    private static void testFind(AppModuleService deptService) throws ServiceException
    {
       com.oracle.xmlns.adf.svc.types.ObjectFactory factory = new com.oracle.xmlns.adf.svc.types.ObjectFactory();

       System.out.println("\n*** Testing findEmpsByDept ***\n");
       FindCriteria fc = factory.createFindCriteria();
       fc.setFetchStart(0);
       fc.setFetchSize(-1);

       List<SEmpViewSDO> empList = deptService.findSEmpView1ByDept(fc, "SALES", null);
       for (SEmpViewSDO emp : empList)
       {
          printEmp(emp);
       }
    }
    
    private static SEmpViewSDO testCreate(AppModuleService deptService) throws ServiceException
    {
       oracle.summit.model.polymorphicvo.views.common.ObjectFactory factory = new oracle.summit.model.polymorphicvo.views.common.ObjectFactory();

       System.out.println("\n*** Testing createEmp ***\n");
       SalespersonViewExSDO salesperson = factory.createSalespersonViewExSDO();
       salesperson.setId(8001);
       salesperson.setFirstName(factory.createSEmpViewSDOFirstName("Lynn"));
       salesperson.setLastName("Munsinger");
       salesperson.setEmail(factory.createSEmpViewSDOEmail("lmunsing@summit.com"));
       salesperson.setTitleId(factory.createSEmpViewSDOTitleId(new BigDecimal(2)));
       salesperson.setSalary(factory.createSEmpViewSDOSalary(new BigDecimal(2000)));
       salesperson.setCommissionPct(factory.createSalespersonViewExSDOCommissionPct(new BigDecimal(20)));
       salesperson.setDeptId(factory.createSEmpViewSDODeptId(31));

       return printEmp(deptService.createSEmpView1(salesperson));
    }

    private static void testDelete(AppModuleService deptService, SEmpViewSDO emp) throws ServiceException
    {
       System.out.println("\n*** Testing deleteEmp ***\n");
       deptService.deleteSEmpView1(emp);
    }
    
    private static SEmpViewSDO printEmp(SEmpViewSDO emp)
    {
       System.out.print(emp.getId() + "\t" + emp.getEmail().getValue() + "\t" + emp.getTitle().getValue() + "\t" +
                        "\t" + emp.getSalary().getValue());
       if (emp instanceof SalespersonViewExSDO)
       {
          System.out.print("\t" + ((SalespersonViewExSDO) emp).getCommissionPct().getValue());
       }
       System.out.println();
       return emp;
    }
}
