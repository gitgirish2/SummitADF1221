package oracle.summit.model.validation;

import java.math.BigDecimal;

import java.util.Date;
import java.util.Calendar;

import oracle.jbo.Key;
import oracle.jbo.RowIterator;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;

import oracle.summit.base.SummitEntityImpl;
// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Tue Jan 20 15:02:55 CST 2015
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class OrdersImpl extends SummitEntityImpl {
 
    /**
     * Validation method for DateOrdered.
     */
    public boolean validateDateOrdered(java.sql.Date dateordered) {
        Calendar cal = Calendar.getInstance();
        cal.setTime(dateordered);
        int dateOrderedDay = cal.get(Calendar.DAY_OF_MONTH);

        if (dateordered != null && dateOrderedDay!=getCurrentDay()) {
              return false;
            }
            return true;
            }
            
            private int getCurrentDay(){
                Calendar now = Calendar.getInstance();
                int dayOfMonth = now.get(Calendar.DAY_OF_MONTH);
                return dayOfMonth;
            }

    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        Id {
            public Object get(OrdersImpl obj) {
                return obj.getId();
            }

            public void put(OrdersImpl obj, Object value) {
                obj.setId((Integer) value);
            }
        }
        ,
        CustomerId {
            public Object get(OrdersImpl obj) {
                return obj.getCustomerId();
            }

            public void put(OrdersImpl obj, Object value) {
                obj.setCustomerId((Integer) value);
            }
        }
        ,
        DateOrdered {
            public Object get(OrdersImpl obj) {
                return obj.getDateOrdered();
            }

            public void put(OrdersImpl obj, Object value) {
                obj.setDateOrdered((Date) value);
            }
        }
        ,
        DateShipped {
            public Object get(OrdersImpl obj) {
                return obj.getDateShipped();
            }

            public void put(OrdersImpl obj, Object value) {
                obj.setDateShipped((Date) value);
            }
        }
        ,
        SalesRepId {
            public Object get(OrdersImpl obj) {
                return obj.getSalesRepId();
            }

            public void put(OrdersImpl obj, Object value) {
                obj.setSalesRepId((Integer) value);
            }
        }
        ,
        Total {
            public Object get(OrdersImpl obj) {
                return obj.getTotal();
            }

            public void put(OrdersImpl obj, Object value) {
                obj.setTotal((BigDecimal) value);
            }
        }
        ,
        PaymentTypeId {
            public Object get(OrdersImpl obj) {
                return obj.getPaymentTypeId();
            }

            public void put(OrdersImpl obj, Object value) {
                obj.setPaymentTypeId((Integer) value);
            }
        }
        ,
        PaymentOptionId {
            public Object get(OrdersImpl obj) {
                return obj.getPaymentOptionId();
            }

            public void put(OrdersImpl obj, Object value) {
                obj.setPaymentOptionId((Integer) value);
            }
        }
        ,
        OrderFilled {
            public Object get(OrdersImpl obj) {
                return obj.getOrderFilled();
            }

            public void put(OrdersImpl obj, Object value) {
                obj.setOrderFilled((String) value);
            }
        }
        ,
        Items {
            public Object get(OrdersImpl obj) {
                return obj.getItems();
            }

            public void put(OrdersImpl obj, Object value) {
                obj.setAttributeInternal(index(), value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(OrdersImpl object);

        public abstract void put(OrdersImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }


    public static final int ID = AttributesEnum.Id.index();
    public static final int CUSTOMERID = AttributesEnum.CustomerId.index();
    public static final int DATEORDERED = AttributesEnum.DateOrdered.index();
    public static final int DATESHIPPED = AttributesEnum.DateShipped.index();
    public static final int SALESREPID = AttributesEnum.SalesRepId.index();
    public static final int TOTAL = AttributesEnum.Total.index();
    public static final int PAYMENTTYPEID = AttributesEnum.PaymentTypeId.index();
    public static final int PAYMENTOPTIONID = AttributesEnum.PaymentOptionId.index();
    public static final int ORDERFILLED = AttributesEnum.OrderFilled.index();
    public static final int ITEMS = AttributesEnum.Items.index();

    /**
     * This is the default constructor (do not remove).
     */
    public OrdersImpl() {
    }

    /**
     * Gets the attribute value for Id, using the alias name Id.
     * @return the value of Id
     */
    public Integer getId() {
        return (Integer) getAttributeInternal(ID);
    }

    /**
     * Sets <code>value</code> as the attribute value for Id.
     * @param value value to set the Id
     */
    public void setId(Integer value) {
        setAttributeInternal(ID, value);
    }

    /**
     * Gets the attribute value for CustomerId, using the alias name CustomerId.
     * @return the value of CustomerId
     */
    public Integer getCustomerId() {
        return (Integer) getAttributeInternal(CUSTOMERID);
    }

    /**
     * Sets <code>value</code> as the attribute value for CustomerId.
     * @param value value to set the CustomerId
     */
    public void setCustomerId(Integer value) {
        setAttributeInternal(CUSTOMERID, value);
    }

    /**
     * Gets the attribute value for DateOrdered, using the alias name DateOrdered.
     * @return the value of DateOrdered
     */
    public Date getDateOrdered() {
        return (Date) getAttributeInternal(DATEORDERED);
    }

    /**
     * Sets <code>value</code> as the attribute value for DateOrdered.
     * @param value value to set the DateOrdered
     */
    public void setDateOrdered(Date value) {
        setAttributeInternal(DATEORDERED, value);
    }

    /**
     * Gets the attribute value for DateShipped, using the alias name DateShipped.
     * @return the value of DateShipped
     */
    public Date getDateShipped() {
        return (Date) getAttributeInternal(DATESHIPPED);
    }

    /**
     * Sets <code>value</code> as the attribute value for DateShipped.
     * @param value value to set the DateShipped
     */
    public void setDateShipped(Date value) {
        setAttributeInternal(DATESHIPPED, value);
    }

    /**
     * Gets the attribute value for SalesRepId, using the alias name SalesRepId.
     * @return the value of SalesRepId
     */
    public Integer getSalesRepId() {
        return (Integer) getAttributeInternal(SALESREPID);
    }

    /**
     * Sets <code>value</code> as the attribute value for SalesRepId.
     * @param value value to set the SalesRepId
     */
    public void setSalesRepId(Integer value) {
        setAttributeInternal(SALESREPID, value);
    }

    /**
     * Gets the attribute value for Total, using the alias name Total.
     * @return the value of Total
     */
    public BigDecimal getTotal() {
        return (BigDecimal) getAttributeInternal(TOTAL);
    }

    /**
     * Sets <code>value</code> as the attribute value for Total.
     * @param value value to set the Total
     */
    public void setTotal(BigDecimal value) {
        setAttributeInternal(TOTAL, value);
    }

    /**
     * Gets the attribute value for PaymentTypeId, using the alias name PaymentTypeId.
     * @return the value of PaymentTypeId
     */
    public Integer getPaymentTypeId() {
        return (Integer) getAttributeInternal(PAYMENTTYPEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PaymentTypeId.
     * @param value value to set the PaymentTypeId
     */
    public void setPaymentTypeId(Integer value) {
        setAttributeInternal(PAYMENTTYPEID, value);
    }

    /**
     * Gets the attribute value for PaymentOptionId, using the alias name PaymentOptionId.
     * @return the value of PaymentOptionId
     */
    public Integer getPaymentOptionId() {
        return (Integer) getAttributeInternal(PAYMENTOPTIONID);
    }

    /**
     * Sets <code>value</code> as the attribute value for PaymentOptionId.
     * @param value value to set the PaymentOptionId
     */
    public void setPaymentOptionId(Integer value) {
        setAttributeInternal(PAYMENTOPTIONID, value);
    }

    /**
     * Gets the attribute value for OrderFilled, using the alias name OrderFilled.
     * @return the value of OrderFilled
     */
    public String getOrderFilled() {
        return (String) getAttributeInternal(ORDERFILLED);
    }

    /**
     * Sets <code>value</code> as the attribute value for OrderFilled.
     * @param value value to set the OrderFilled
     */
    public void setOrderFilled(String value) {
        setAttributeInternal(ORDERFILLED, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity oracle.jbo.RowIterator.
     */
    public RowIterator getItems() {
        return (RowIterator) getAttributeInternal(ITEMS);
    }

    /**
     * @param id key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer id) {
        return new Key(new Object[] { id });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("oracle.summit.model.validation.Orders");
    }


    /**
     * Validation method for Orders.
     */
    public boolean validateOrders() {
        Date DateShipped = getDateShipped();
        Date DateOrdered  = getDateOrdered();
        if (DateShipped != null && DateShipped.compareTo(DateOrdered) < 0) {
          return false;
        }
        return true;
        }


}

