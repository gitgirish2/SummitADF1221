package oracle.summit.model.multieoupdate;

import java.sql.Timestamp;

import oracle.jbo.AttributeList;
import oracle.jbo.Key;
import oracle.jbo.server.AttributeDefImpl;
import oracle.jbo.server.EntityDefImpl;

import oracle.jbo.server.TransactionEvent;

import oracle.summit.base.SummitEntityImpl;

// ---------------------------------------------------------------------
// ---    File generated by Oracle ADF Business Components Design Time.
// ---    Wed Mar 27 14:36:02 CDT 2013
// ---    Custom code may be added to this class.
// ---    Warning: Do not modify method signatures of generated methods.
// ---------------------------------------------------------------------
public class InventoryImpl extends SummitEntityImpl {
    /**
     * AttributesEnum: generated enum for identifying attributes and accessors. DO NOT MODIFY.
     */
    public enum AttributesEnum {
        ProductId {
            public Object get(InventoryImpl obj) {
                return obj.getProductId();
            }

            public void put(InventoryImpl obj, Object value) {
                obj.setProductId((Integer) value);
            }
        }
        ,
        WarehouseId {
            public Object get(InventoryImpl obj) {
                return obj.getWarehouseId();
            }

            public void put(InventoryImpl obj, Object value) {
                obj.setWarehouseId((Integer) value);
            }
        }
        ,
        AmountInStock {
            public Object get(InventoryImpl obj) {
                return obj.getAmountInStock();
            }

            public void put(InventoryImpl obj, Object value) {
                obj.setAmountInStock((Integer) value);
            }
        }
        ,
        ReorderPoint {
            public Object get(InventoryImpl obj) {
                return obj.getReorderPoint();
            }

            public void put(InventoryImpl obj, Object value) {
                obj.setReorderPoint((Integer) value);
            }
        }
        ,
        MaxInStock {
            public Object get(InventoryImpl obj) {
                return obj.getMaxInStock();
            }

            public void put(InventoryImpl obj, Object value) {
                obj.setMaxInStock((Integer) value);
            }
        }
        ,
        OutOfStockExplanation {
            public Object get(InventoryImpl obj) {
                return obj.getOutOfStockExplanation();
            }

            public void put(InventoryImpl obj, Object value) {
                obj.setOutOfStockExplanation((String) value);
            }
        }
        ,
        RestockDate {
            public Object get(InventoryImpl obj) {
                return obj.getRestockDate();
            }

            public void put(InventoryImpl obj, Object value) {
                obj.setRestockDate((Timestamp) value);
            }
        }
        ,
        Product {
            public Object get(InventoryImpl obj) {
                return obj.getProduct();
            }

            public void put(InventoryImpl obj, Object value) {
                obj.setProduct((ProductImpl) value);
            }
        }
        ;
        private static AttributesEnum[] vals = null;
        private static final int firstIndex = 0;

        public abstract Object get(InventoryImpl object);

        public abstract void put(InventoryImpl object, Object value);

        public int index() {
            return AttributesEnum.firstIndex() + ordinal();
        }

        public static final int firstIndex() {
            return firstIndex;
        }

        public static int count() {
            return AttributesEnum.firstIndex() + AttributesEnum.staticValues().length;
        }

        public static final AttributesEnum[] staticValues() {
            if (vals == null) {
                vals = AttributesEnum.values();
            }
            return vals;
        }
    }
    public static final int PRODUCTID = AttributesEnum.ProductId.index();
    public static final int WAREHOUSEID = AttributesEnum.WarehouseId.index();
    public static final int AMOUNTINSTOCK = AttributesEnum.AmountInStock.index();
    public static final int REORDERPOINT = AttributesEnum.ReorderPoint.index();
    public static final int MAXINSTOCK = AttributesEnum.MaxInStock.index();
    public static final int OUTOFSTOCKEXPLANATION = AttributesEnum.OutOfStockExplanation.index();
    public static final int RESTOCKDATE = AttributesEnum.RestockDate.index();
    public static final int PRODUCT = AttributesEnum.Product.index();

    /**
     * This is the default constructor (do not remove).
     */
    public InventoryImpl() {
    }


    @Override
    protected void create(AttributeList attributeList) {
        // TODO Implement this method
        super.create(attributeList);
    }

    @Override
    public void postChanges(TransactionEvent transactionEvent) {
        // TODO Implement this method
        /* If current entity is new or modified */
        if (getPostState() == STATUS_NEW || 
           getPostState() == STATUS_MODIFIED) {
           /* Get the associated dept for the employee */
           ProductImpl product = getProduct();
           /* If there is an associated dept */
           if (product != null) {
              /* And if it's post-status is NEW */
              if (product.getPostState() == STATUS_NEW) {
                 /*
        * Post the department first, before posting this
        * entity by calling super below
        */
                 product.postChanges(transactionEvent);
              }
           }
        }        
        
        
        
        super.postChanges(transactionEvent);
    }



    /**
     * Gets the attribute value for ProductId, using the alias name ProductId.
     * @return the value of ProductId
     */
    public Integer getProductId() {
        return (Integer) getAttributeInternal(PRODUCTID);
    }

    /**
     * Sets <code>value</code> as the attribute value for ProductId.
     * @param value value to set the ProductId
     */
    public void setProductId(Integer value) {
        setAttributeInternal(PRODUCTID, value);
    }

    /**
     * Gets the attribute value for WarehouseId, using the alias name WarehouseId.
     * @return the value of WarehouseId
     */
    public Integer getWarehouseId() {
        return (Integer) getAttributeInternal(WAREHOUSEID);
    }

    /**
     * Sets <code>value</code> as the attribute value for WarehouseId.
     * @param value value to set the WarehouseId
     */
    public void setWarehouseId(Integer value) {
        setAttributeInternal(WAREHOUSEID, value);
    }

    /**
     * Gets the attribute value for AmountInStock, using the alias name AmountInStock.
     * @return the value of AmountInStock
     */
    public Integer getAmountInStock() {
        return (Integer) getAttributeInternal(AMOUNTINSTOCK);
    }

    /**
     * Sets <code>value</code> as the attribute value for AmountInStock.
     * @param value value to set the AmountInStock
     */
    public void setAmountInStock(Integer value) {
        setAttributeInternal(AMOUNTINSTOCK, value);
    }

    /**
     * Gets the attribute value for ReorderPoint, using the alias name ReorderPoint.
     * @return the value of ReorderPoint
     */
    public Integer getReorderPoint() {
        return (Integer) getAttributeInternal(REORDERPOINT);
    }

    /**
     * Sets <code>value</code> as the attribute value for ReorderPoint.
     * @param value value to set the ReorderPoint
     */
    public void setReorderPoint(Integer value) {
        setAttributeInternal(REORDERPOINT, value);
    }

    /**
     * Gets the attribute value for MaxInStock, using the alias name MaxInStock.
     * @return the value of MaxInStock
     */
    public Integer getMaxInStock() {
        return (Integer) getAttributeInternal(MAXINSTOCK);
    }

    /**
     * Sets <code>value</code> as the attribute value for MaxInStock.
     * @param value value to set the MaxInStock
     */
    public void setMaxInStock(Integer value) {
        setAttributeInternal(MAXINSTOCK, value);
    }

    /**
     * Gets the attribute value for OutOfStockExplanation, using the alias name OutOfStockExplanation.
     * @return the value of OutOfStockExplanation
     */
    public String getOutOfStockExplanation() {
        return (String) getAttributeInternal(OUTOFSTOCKEXPLANATION);
    }

    /**
     * Sets <code>value</code> as the attribute value for OutOfStockExplanation.
     * @param value value to set the OutOfStockExplanation
     */
    public void setOutOfStockExplanation(String value) {
        setAttributeInternal(OUTOFSTOCKEXPLANATION, value);
    }

    /**
     * Gets the attribute value for RestockDate, using the alias name RestockDate.
     * @return the value of RestockDate
     */
    public Timestamp getRestockDate() {
        return (Timestamp) getAttributeInternal(RESTOCKDATE);
    }

    /**
     * Sets <code>value</code> as the attribute value for RestockDate.
     * @param value value to set the RestockDate
     */
    public void setRestockDate(Timestamp value) {
        setAttributeInternal(RESTOCKDATE, value);
    }

    /**
     * getAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param attrDef the attribute

     * @return the attribute value
     * @throws Exception
     */
    protected Object getAttrInvokeAccessor(int index, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            return AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].get(this);
        }
        return super.getAttrInvokeAccessor(index, attrDef);
    }

    /**
     * setAttrInvokeAccessor: generated method. Do not modify.
     * @param index the index identifying the attribute
     * @param value the value to assign to the attribute
     * @param attrDef the attribute

     * @throws Exception
     */
    protected void setAttrInvokeAccessor(int index, Object value, AttributeDefImpl attrDef) throws Exception {
        if ((index >= AttributesEnum.firstIndex()) && (index < AttributesEnum.count())) {
            AttributesEnum.staticValues()[index - AttributesEnum.firstIndex()].put(this, value);
            return;
        }
        super.setAttrInvokeAccessor(index, value, attrDef);
    }

    /**
     * @return the associated entity ProductImpl.
     */
    public ProductImpl getProduct() {
        return (ProductImpl) getAttributeInternal(PRODUCT);
    }

    /**
     * Sets <code>value</code> as the associated entity ProductImpl.
     */
    public void setProduct(ProductImpl value) {
        setAttributeInternal(PRODUCT, value);
    }

    /**
     * @param productId key constituent
     * @param warehouseId key constituent

     * @return a Key object based on given key constituents.
     */
    public static Key createPrimaryKey(Integer productId, Integer warehouseId) {
        return new Key(new Object[] { productId, warehouseId });
    }

    /**
     * @return the definition object for this instance class.
     */
    public static synchronized EntityDefImpl getDefinitionObject() {
        return EntityDefImpl.findDefObject("oracle.summit.model.multieoupdate.Inventory");
    }
}

